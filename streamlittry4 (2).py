# -*- coding: utf-8 -*-
"""streamlittry4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UZ6l6_ydFfzo6VJVAlNXJQQ61p9dJgpz
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from scipy.stats import norm
from scipy.optimize import fsolve

# ================= Streamlit Sidebar Inputs =================
st.sidebar.title("Options Analysis Dashboard")
ticker = st.sidebar.text_input("Ticker", value="AAPL", key="ticker_input")
expiry_count = st.sidebar.slider("Expiry Count", 1, 10, 3, key="expiry_count")
E = st.sidebar.slider("E (Pinning)", 0.001, 0.05, 0.01, key="pinning")
opt_type = st.sidebar.selectbox("Option Type", ["Put", "Call"], key="opt_type")

# Load expirations dynamically once ticker is entered
expirations = []
if ticker:
    stock = yf.Ticker(ticker)
    expirations = stock.options if stock.options else []

# Expiry selection BEFORE Run Analysis
selected_expiries = st.sidebar.multiselect("Select Expiries for Analysis", expirations, default=expirations[:3] if expirations else [], key="expiries_select")
valuation_expiry = st.sidebar.selectbox("Select Expiry for Valuation", expirations, key="valuation_expiry")

# Run button AFTER expiry selections
run_analysis = st.sidebar.button("Run Analysis", key="run_analysis")

# ================= Black-Scholes Option Pricing =================
def black_scholes_price(S, K, T, r, sigma, option_type='call'):
    d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    if option_type.lower() == 'call':
        return S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)
    else:
        return K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)

# ================= Max Pain Calculation =================
def calculate_max_pain(ticker, expiry):
    stock = yf.Ticker(ticker)
    option_chain = stock.option_chain(expiry)
    calls, puts = option_chain.calls, option_chain.puts
    strikes = sorted(set(calls['strike']).union(set(puts['strike'])))
    pain = []
    for K in strikes:
        call_loss = np.sum(np.maximum(0, K - calls['strike']) * calls['openInterest'])
        put_loss = np.sum(np.maximum(0, puts['strike'] - K) * puts['openInterest'])
        pain.append(call_loss + put_loss)
    min_pain_idx = np.argmin(pain)
    return strikes[min_pain_idx]

# ================= Generate Option Report =================
def generate_option_report(ticker, expiries, max_pain_prices, pinning_probs,
                           bs_call, bs_put, earnings_move, vol_skew_rr,
                           call_iv, put_iv, current_price, forecast_days=30):
    report = f"📊 **Option Market Analysis Report: {ticker}**\n\n"
    avg_max_pain = np.mean(max_pain_prices)
    expiry_str = ", ".join(expiries)
    report += f"1️⃣ **Max Pain (最大痛点价):**\n- 到期日 {expiries} 的 Max Pain 价格: {max_pain_prices}\n- 平均最大痛点价 **${avg_max_pain:.2f}**，当前股价 **${current_price:.2f}**。\n⏳ 有效期至最近的到期日 {expiries[0]}.\n"
    report += "👉 股价高于平均痛点价，下行压力。\n\n" if current_price > avg_max_pain else "👉 股价低于平均痛点价，上行潜力。\n\n"
    report += "2️⃣ **Pinning Probability:**\n" + "\n".join([f"- {e}: {p*100:.2f}%" for e, p in zip(expiries, pinning_probs)]) + f"\n⏳ 适用于到期日: {expiry_str}\n\n"
    report += f"3️⃣ **Black-Scholes 定价:** Call ${bs_call:.2f}, Put ${bs_put:.2f}\n⏳ 每日更新。\n\n"
    price_lower = current_price * (1 - earnings_move/100)
    price_upper = current_price * (1 + earnings_move/100)
    report += f"4️⃣ **Earnings Move:** ±{earnings_move:.2f}%, 区间: ${price_lower:.2f}-${price_upper:.2f}\n\n"
    report += f"5️⃣ **Vol Skew & RR:** Call IV {call_iv:.2f}%, Put IV {put_iv:.2f}%, RR {vol_skew_rr:.2f}%\n\n"
    forecast_lower = current_price * (1 + vol_skew_rr/200 - earnings_move/200)
    forecast_upper = current_price * (1 - vol_skew_rr/200 + earnings_move/200)
    expiry_date = (datetime.today() + timedelta(days=forecast_days)).strftime("%Y-%m-%d")
    report += f"6️⃣ **{forecast_days}天预测:** ${forecast_lower:.2f}-${forecast_upper:.2f} (至 {expiry_date})\n\n"
    report += "---\n📌 **结论:** " + ("防御/看跌策略" if vol_skew_rr<0 else "偏多策略")
    return report

# ================= Run Analysis =================
if run_analysis and ticker and selected_expiries:
    stock = yf.Ticker(ticker)
    current_price = stock.history(period="1d")["Close"][-1]

    # Example placeholders (replace with real calc logic)
    max_pain_prices = [calculate_max_pain(ticker, e) for e in selected_expiries]
    pinning_probs = [0.012 for _ in selected_expiries]
    bs_call, bs_put = 7.43, 6.94
    earnings_move = 4.17
    vol_skew_rr, call_iv, put_iv = -13.09, 67.19, 80.27

    report = generate_option_report(ticker, selected_expiries, max_pain_prices, pinning_probs,
                                    bs_call, bs_put, earnings_move, vol_skew_rr,
                                    call_iv, put_iv, current_price)
    st.markdown(report)
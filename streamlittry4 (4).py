# -*- coding: utf-8 -*-
"""streamlittry4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UZ6l6_ydFfzo6VJVAlNXJQQ61p9dJgpz
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from scipy.stats import norm
from scipy.optimize import fsolve

# ================= Streamlit Sidebar Inputs =================
st.sidebar.title("Options Analysis Dashboard")
ticker = st.sidebar.text_input("Ticker", value="AAPL")
expiry_count = st.sidebar.slider("Expiry Count", 1, 10, 3)
forecast_days = st.sidebar.slider("Forecast Days", 10, 90, 30)
E = st.sidebar.slider("E (Pinning)", 0.001, 0.05, 0.01)
opt_type = st.sidebar.selectbox("Option Type", ["Put", "Call"])

# Ensure ticker is valid before fetching data
if ticker:
    stock = yf.Ticker(ticker)
    try:
        expirations = stock.options
        st.sidebar.write("Available Expiries:", expirations)
        selected_expiries = st.sidebar.multiselect("Select Expiries for Analysis", expirations, default=expirations[:expiry_count])
        valuation_expiry = st.sidebar.selectbox("Select Expiry for Valuation", expirations)
    except Exception as e:
        st.error(f"Error fetching options data: {e}")
        selected_expiries, valuation_expiry = [], None
else:
    st.stop()

# ================= Black-Scholes Option Pricing =================
def black_scholes_price(S, K, T, r, sigma, option_type='call'):
    d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    if option_type.lower() == 'call':
        return S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)
    else:
        return K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)

# ================= Generate Detailed Report =================
def generate_option_report(ticker, expiries, max_pain_prices, pinning_probs,
                           bs_call, bs_put, earnings_move, vol_skew_rr,
                           call_iv, put_iv, current_price, forecast_days=30):
    report = f"📊 **Option Market Analysis Report: {ticker}**\n\n"
    avg_max_pain = np.mean(max_pain_prices)
    expiry_str = ", ".join(expiries)

    # 1️⃣ Max Pain
    report += f"1️⃣ **Max Pain (最大痛点价):**\n"
    report += f"- 到期日分别为 {expiries} 的 Max Pain 价格: {max_pain_prices}\n"
    report += f"- 平均最大痛点价约为 **${avg_max_pain:.2f}**，当前股价为 **${current_price:.2f}**。\n"
    report += f"⏳ **保质期:** 基于上述到期日的期权结构，有效期至最近的到期日 {expiries[0]}。\n"
    if current_price > avg_max_pain:
        report += "👉 股价高于平均痛点价，短期有下行回归压力。\n\n"
    else:
        report += "👉 股价低于平均痛点价，可能向上回归至痛点水平。\n\n"

    # 2️⃣ Pinning Probability
    report += "2️⃣ **Pinning Probability (钉住概率):**\n"
    for e, p in zip(expiries, pinning_probs):
        report += f"- {e}: 钉住概率 **{p*100:.2f}%**\n"
    report += f"⏳ **保质期:** 钉住概率预测仅适用于各自的到期日 ({expiry_str})。\n\n"

    # 3️⃣ Black-Scholes Pricing
    report += f"3️⃣ **Black-Scholes 定价:**\n- Call **${bs_call:.2f}**，Put **${bs_put:.2f}**。\n⏳ **保质期:** 即期估值，需每日更新。\n\n"

    # 4️⃣ Earnings Expected Move
    price_lower = current_price * (1 - earnings_move/100)
    price_upper = current_price * (1 + earnings_move/100)
    report += f"4️⃣ **Earnings Expected Move (财报预期波动):**\n- 隐含波动区间 ±{earnings_move:.2f}%: **${price_lower:.2f} - ${price_upper:.2f}**。\n⏳ **保质期:** 财报日前后约1周。\n\n"

    # 5️⃣ Vol Skew & RR
    report += f"5️⃣ **Vol Skew & Risk Reversal:**\n- Call IV: **{call_iv:.2f}%**, Put IV: **{put_iv:.2f}%**。\n- RR: **{vol_skew_rr:.2f}%** ({'看涨' if vol_skew_rr>0 else '看跌/防御'}).\n\n"

    # 6️⃣ Forecast
    forecast_lower = current_price * (1 + vol_skew_rr/200 - earnings_move/200)
    forecast_upper = current_price * (1 - vol_skew_rr/200 + earnings_move/200)
    expiry_date = (datetime.today() + timedelta(days=forecast_days)).strftime("%Y-%m-%d")
    report += f"6️⃣ **{forecast_days}天价格预测区间:**\n- **${forecast_lower:.2f} - ${forecast_upper:.2f}**。\n⏳ **保质期:** 至 **{expiry_date}**。\n\n---\n📌 **结论:** 市场{'防御/看跌' if vol_skew_rr<0 else '偏多'}，建议相应策略布局。"

    return report

# ================= Run Analysis =================
if st.sidebar.button("Run Analysis"):
    hist = stock.history(period="1d")
    if hist.empty:
        st.error("No historical data available. Check ticker.")
    else:
        current_price = hist["Close"].iloc[-1]
        # Placeholder data for demonstration
        max_pain_prices = [current_price - 2 for _ in selected_expiries]
        pinning_probs = [0.012 for _ in selected_expiries]
        bs_call, bs_put = 7.43, 6.94
        earnings_move = 4.17
        vol_skew_rr, call_iv, put_iv = -13.09, 67.19, 80.27

        # Generate Report
        report = generate_option_report(ticker, selected_expiries, max_pain_prices, pinning_probs,
                                        bs_call, bs_put, earnings_move, vol_skew_rr,
                                        call_iv, put_iv, current_price, forecast_days)
        st.markdown(report)

        # Anticipation Plot
        days = np.arange(0, forecast_days+1)
        max_pain_path = np.linspace(current_price, np.mean(max_pain_prices), len(days))
        bs_path = np.linspace(current_price, current_price * (1 + vol_skew_rr/200), len(days))
        avg_path = (max_pain_path + bs_path) / 2

        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(days, max_pain_path, label="Max Pain Path")
        ax.plot(days, bs_path, label="BS Path")
        ax.plot(days, avg_path, label="Average Path", linestyle="--")
        ax.set_title("Price Anticipation Plot")
        ax.set_xlabel("Days")
        ax.set_ylabel("Price")
        ax.legend()
        st.pyplot(fig)
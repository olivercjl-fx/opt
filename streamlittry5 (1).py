# -*- coding: utf-8 -*-
"""streamlittry5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14hvwpG5eq6bbkpVXWxWdLAWe6KoHmDuq
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from scipy.stats import norm
from scipy.optimize import fsolve, curve_fit

# ================= Streamlit Sidebar Inputs =================
st.sidebar.title("Options Analysis Dashboard")
ticker = st.sidebar.text_input("Ticker", value="AAPL")
expiry_count = st.sidebar.slider("Expiry Count", 1, 10, 3)
forecast_days = st.sidebar.slider("Forecast Days", 10, 90, 30)
E = st.sidebar.slider("E (Pinning)", 0.001, 0.05, 0.01)
opt_type = st.sidebar.selectbox("Option Type", ["Put", "Call"])

# Ensure ticker is valid before fetching data
if ticker:
    stock = yf.Ticker(ticker)
    try:
        expirations = stock.options
        st.sidebar.write("Available Expiries:", expirations)
        selected_expiries = st.sidebar.multiselect("Select Expiries for Analysis", expirations, default=expirations[:expiry_count])
        valuation_expiry = st.sidebar.selectbox("Select Expiry for Valuation", expirations)
    except Exception as e:
        st.error(f"Error fetching options data: {e}")
        selected_expiries, valuation_expiry = [], None
else:
    st.stop()

# ================= Option Builder =================
st.sidebar.subheader("Option Strategy Builder")
strategy = st.sidebar.selectbox("Select Strategy", ["Single Call", "Single Put", "Vertical Spread", "Straddle"])
strike_price = st.sidebar.number_input("Strike Price", min_value=1.0, value=100.0)
premium = st.sidebar.number_input("Option Premium", min_value=0.0, value=5.0)

if strategy == "Vertical Spread":
    strike_price_2 = st.sidebar.number_input("Second Strike Price", min_value=1.0, value=105.0)
    premium_2 = st.sidebar.number_input("Second Option Premium", min_value=0.0, value=3.0)

if st.sidebar.button("Build Option"):
    price_range = np.linspace(strike_price * 0.8, strike_price * 1.2, 100)
    payoff = None
    if strategy == "Single Call":
        payoff = np.maximum(price_range - strike_price, 0) - premium
    elif strategy == "Single Put":
        payoff = np.maximum(strike_price - price_range, 0) - premium
    elif strategy == "Vertical Spread":
        payoff = (np.maximum(price_range - strike_price, 0) - premium) - (np.maximum(price_range - strike_price_2, 0) - premium_2)
    elif strategy == "Straddle":
        payoff = (np.maximum(price_range - strike_price, 0) - premium) + (np.maximum(strike_price - price_range, 0) - premium)

    fig, ax = plt.subplots(figsize=(8, 4))
    ax.plot(price_range, payoff, label=strategy)
    ax.axhline(0, color='black', linestyle='--')
    ax.set_title(f"Payoff Diagram: {strategy}")
    ax.set_xlabel("Underlying Price")
    ax.set_ylabel("Profit / Loss")
    ax.legend()
    st.pyplot(fig)

# ================= Black-Scholes Option Pricing =================
def black_scholes_price(S, K, T, r, sigma, option_type='call'):
    d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    if option_type.lower() == 'call':
        return S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)
    else:
        return K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)

# ================= Fetch Stock Data =================
def fetch_stock_data(ticker, period="6mo", interval="1h"):
    data = yf.download(ticker, period=period, interval=interval)
    if data.empty:
        st.warning(f"[错误] 无法获取 {ticker} 的股票数据，请检查代码或网络连接。")
        return pd.DataFrame()
    data.reset_index(inplace=True)
    return data

# ================= Volume Profile Calculation =================
def compute_volume_profile(data, bins=50):
    if data.empty:
        st.warning("[警告] 股票数据为空，无法计算 Volume Profile")
        return None, None, None, None, None

    hist, edges = np.histogram(data['Close'], bins=bins, weights=data['Volume'])
    if hist.sum() == 0:
        st.warning("[警告] 成交量为0，无法计算POC/VA")
        return None, None, None, hist, edges

    poc_idx = np.argmax(hist)
    poc_price = (edges[poc_idx] + edges[poc_idx+1]) / 2

    sorted_idx = np.argsort(hist)[::-1]
    cum_vol = np.cumsum(hist[sorted_idx])
    total_vol = cum_vol[-1]
    value_area_idx = sorted_idx[cum_vol <= total_vol * 0.7]
    value_area_prices = [(edges[i]+edges[i+1])/2 for i in value_area_idx]

    vah, val = max(value_area_prices), min(value_area_prices)
    return poc_price, vah, val, hist, edges

# ================= Volume Power-Law Fit =================
def power_law(x, a, b):
    return a * np.power(x, -b)

def fit_power_law(volumes):
    volumes = np.array(volumes)
    volumes = volumes[volumes > 0]
    if len(volumes) < 10:
        st.warning("[警告] 成交量样本不足，无法拟合幂律分布")
        return (np.nan, np.nan), np.array([]), np.array([])

    hist, edges = np.histogram(volumes, bins=50)
    x = (edges[:-1] + edges[1:]) / 2
    y = hist / sum(hist)
    mask = (y > 0)
    popt, _ = curve_fit(lambda x,a,b: a*x**-b, x[mask], y[mask], maxfev=5000)
    return popt, x, y

# ================= Generate Detailed Report =================
def generate_option_report(ticker, expiries, max_pain_prices, pinning_probs,
                           bs_call, bs_put, earnings_move, vol_skew_rr,
                           call_iv, put_iv, current_price, forecast_days=30):
    report = f"📊 **Option Market Analysis Report: {ticker}**\n\n"
    avg_max_pain = np.mean(max_pain_prices)
    expiry_str = ", ".join(expiries)

    report += f"1️⃣ **Max Pain (最大痛点价):**\n"
    report += f"- 到期日分别为 {expiries} 的 Max Pain 价格: {max_pain_prices}\n"
    report += f"- 平均最大痛点价约为 **${avg_max_pain:.2f}**，当前股价为 **${current_price:.2f}**。\n"
    report += f"⏳ **保质期:** 基于上述到期日的期权结构，有效期至最近的到期日 {expiries[0]}。\n"
    if current_price > avg_max_pain:
        report += "👉 股价高于平均痛点价，短期有下行回归压力。\n\n"
    else:
        report += "👉 股价低于平均痛点价，可能向上回归至痛点水平。\n\n"

    report += "2️⃣ **Pinning Probability (钉住概率):**\n"
    for e, p in zip(expiries, pinning_probs):
        report += f"- {e}: 钉住概率 **{p*100:.2f}%**\n"
    report += f"⏳ **保质期:** 钉住概率预测仅适用于各自的到期日 ({expiry_str})。\n\n"

    report += f"3️⃣ **Black-Scholes 定价:**\n- Call **${bs_call:.2f}**，Put **${bs_put:.2f}**。\n⏳ **保质期:** 即期估值，需每日更新。\n\n"

    price_lower = current_price * (1 - earnings_move/100)
    price_upper = current_price * (1 + earnings_move/100)
    report += f"4️⃣ **Earnings Expected Move (财报预期波动):**\n- 隐含波动区间 ±{earnings_move:.2f}%: **${price_lower:.2f} - ${price_upper:.2f}**。\n⏳ **保质期:** 财报日前后约1周。\n\n"

    report += f"5️⃣ **Vol Skew & Risk Reversal:**\n- Call IV: **{call_iv:.2f}%**, Put IV: **{put_iv:.2f}%**。\n- RR: **{vol_skew_rr:.2f}%** ({'看涨' if vol_skew_rr>0 else '看跌/防御'}).\n\n"

    forecast_lower = current_price * (1 + vol_skew_rr/200 - earnings_move/200)
    forecast_upper = current_price * (1 - vol_skew_rr/200 + earnings_move/200)
    expiry_date = (datetime.today() + timedelta(days=forecast_days)).strftime("%Y-%m-%d")
    report += f"6️⃣ **{forecast_days}天价格预测区间:**\n- **${forecast_lower:.2f} - ${forecast_upper:.2f}**。\n⏳ **保质期:** 至 **{expiry_date}**。\n\n---\n📌 **结论:** 市场{'防御/看跌' if vol_skew_rr<0 else '偏多'}，建议相应策略布局。"

    return report
def generate_option_report(
    ticker, expiries, max_pain_prices, pinning_probs,
    bs_call, bs_put, earnings_move, vol_skew_rr,
    call_iv, put_iv, current_price,
    poc, vah, val, max_call, max_put,
    forecast_days=30
):
    report = f"📊 **Option Market Analysis Report: {ticker}**\n\n"
    avg_max_pain = np.mean(max_pain_prices)
    expiry_str = ", ".join(expiries)

    report += "1️⃣ **Max Pain (最大痛点价):**\n"
    report += f"- 到期日分别为 {expiries} 的 Max Pain 价格: {max_pain_prices}\n"
    report += f"- 平均最大痛点价约为 **${avg_max_pain:.2f}**，当前股价为 **${current_price:.2f}**。\n"
    report += f"⏳ **保质期:** 有效期至 {expiries[0]}。\n\n"

    report += "2️⃣ **Pinning Probability (钉住概率):**\n"
    for e, p in zip(expiries, pinning_probs):
        report += f"- {e}: {p*100:.2f}%\n"
    report += f"⏳ 仅适用于到期日 ({expiry_str})。\n\n"

    report += "3️⃣ **Black-Scholes 定价:**\n"
    report += f"- Call: ${bs_call:.2f}, Put: ${bs_put:.2f}。\n⏳ 即期估值，需每日更新。\n\n"

    low, high = current_price*(1-earnings_move/100), current_price*(1+earnings_move/100)
    report += "4️⃣ **Earnings Move:**\n"
    report += f"- ±{earnings_move:.2f}%: ${low:.2f} - ${high:.2f}。\n⏳ 财报日前后1周。\n\n"

    report += "5️⃣ **Vol Skew & RR:**\n"
    report += f"- Call IV: {call_iv:.2f}%, Put IV: {put_iv:.2f}%. RR: {vol_skew_rr:.2f}%。\n\n"

    report += "7️⃣ **OI & Volume Profile 对比:**\n"
    report += f"- Call 最大 OI 执行价: ${max_call:.2f}，Put 最大 OI 执行价: ${max_put:.2f}。\n"
    report += f"- POC: ${poc:.2f}, VAH: ${vah:.2f}, VAL: ${val:.2f}。\n"
    report += f"- 当前股价: ${current_price:.2f}。\n"
    if current_price > vah:
        report += "👉 价格高于 VAH，可能短期超买。\n\n"
    elif current_price < val:
        report += "👉 价格低于 VAL，可能短期超卖。\n\n"
    else:
        report += "👉 价格在价值区间内，属于正常波动。\n\n"

    expiry_date = (datetime.today()+timedelta(days=forecast_days)).strftime("%Y-%m-%d")
    report += "6️⃣ **价格预测区间:**\n"
    report += f"- {forecast_days}天: ${low:.2f} - ${high:.2f} (至 {expiry_date})。\n\n"

    report += f"📌 **结论:** 市场 {'偏多' if vol_skew_rr>0 else '偏空'}，建议布局相应策略。"
    return report

# ================= Run Analysis =================
if st.sidebar.button("Run Analysis"):
    hist = stock.history(period="1d")
    if hist.empty:
        st.error("No historical data available. Check ticker.")
    else:
        current_price = hist["Close"].iloc[-1]
        option_chain = stock.option_chain(valuation_expiry)
        calls, puts = option_chain.calls, option_chain.puts
        max_oi_call = calls.loc[calls['openInterest'].idxmax()]
        max_oi_put = puts.loc[puts['openInterest'].idxmax()]
        st.write(f"**Call 最大OI执行价:** {max_oi_call['strike']}")
        st.write(f"**Put 最大OI执行价:** {max_oi_put['strike']}")

        data = fetch_stock_data(ticker)
        poc, vah, val, hist_v, edges = compute_volume_profile(data)
        if poc:
            st.write(f"[Volume Profile] POC: {poc:.2f}, VAH: {vah:.2f}, VAL: {val:.2f}")

        max_pain_prices = [current_price - 2 for _ in selected_expiries]
        pinning_probs = [0.012 for _ in selected_expiries]
        bs_call, bs_put = 7.43, 6.94
        earnings_move = 4.17
        vol_skew_rr, call_iv, put_iv = -13.09, 67.19, 80.27

        report = generate_option_report(ticker, selected_expiries, max_pain_prices, pinning_probs,
                                        bs_call, bs_put, earnings_move, vol_skew_rr,
                                        call_iv, put_iv, current_price, forecast_days)
        st.markdown(report)

        days = np.arange(0, forecast_days+1)
        max_pain_path = np.linspace(current_price, np.mean(max_pain_prices), len(days))
        bs_path = np.linspace(current_price, current_price * (1 + vol_skew_rr/200), len(days))
        avg_path = (max_pain_path + bs_path) / 2

        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(days, max_pain_path, label="Max Pain Path")
        ax.plot(days, bs_path, label="BS Path")
        ax.plot(days, avg_path, label="Average Path", linestyle="--")
        ax.set_title("Price Anticipation Plot")
        ax.set_xlabel("Days")
        ax.set_ylabel("Price")
        ax.legend()
        st.pyplot(fig)
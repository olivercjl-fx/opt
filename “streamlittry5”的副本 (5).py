# -*- coding: utf-8 -*-
"""‚Äústreamlittry5‚ÄùÁöÑÂâØÊú¨

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wa5UpSu_7ESCqll6iciUljYHncojNbGi
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from scipy.stats import norm

# ================= Streamlit Sidebar Inputs =================
st.sidebar.title("Options Analysis Dashboard")
ticker = st.sidebar.text_input("Ticker", value="AAPL")
expiry_count = st.sidebar.slider("Expiry Count", 1, 10, 3)
forecast_days = st.sidebar.slider("Forecast Days", 10, 90, 30)

# ================= Helper Functions =================
def black_scholes_price(S, K, T, r, sigma, option_type='call'):
    d1 = (np.log(S/K) + (r+0.5*sigma**2)*T)/(sigma*np.sqrt(T))
    d2 = d1 - sigma*np.sqrt(T)
    if option_type=='call':
        return S*norm.cdf(d1) - K*np.exp(-r*T)*norm.cdf(d2)
    return K*np.exp(-r*T)*norm.cdf(-d2) - S*norm.cdf(-d1)

def fetch_data(ticker):
    hist = yf.Ticker(ticker).history(period='1d')
    df = yf.download(ticker, period="6mo", interval="1h")
    return hist, df

def compute_volume_profile(df, bins=50):
    hist, edges = np.histogram(df['Close'], bins=bins, weights=df['Volume'])
    poc = float((edges[np.argmax(hist)] + edges[np.argmax(hist)+1]) / 2)
    total = hist.sum()
    idx = np.argsort(hist)[::-1]
    cum = np.cumsum(hist[idx])
    va_idx = idx[cum <= total*0.7]
    va_prices = [(edges[i]+edges[i+1])/2 for i in va_idx]
    return poc, float(max(va_prices)), float(min(va_prices))

def compute_stock_rating(current_price, avg_max_pain, vol_skew_rr, poc, vah, val):
    dp = 1 - abs(current_price-avg_max_pain)/avg_max_pain
    ds = (vol_skew_rr + 100)/200
    dv = 1 - abs(current_price - poc)/(vah-val)
    score = np.clip((0.4*dp + 0.3*ds + 0.3*dv)*10, 0, 10)
    return round(score, 1)

# ================= Generate Reports =================
def generate_reports(ticker, expiries, max_pain_prices, pin_probs,
                     bs_call, bs_put, earnings_move, vol_skew_rr,
                     call_iv, put_iv, current_price,
                     poc, vah, val, max_call, max_put):
    avg_max_pain = float(np.mean(max_pain_prices))
    low_move = current_price * (1 - earnings_move/100)
    high_move = current_price * (1 + earnings_move/100)
    forecast_low = min(avg_max_pain, low_move)
    forecast_high = max(avg_max_pain, high_move)

    # Build Chinese report
    lines_cn = []
    lines_cn.append(f"üìä ÊúüÊùÉÂ∏ÇÂú∫ÂàÜÊûêÊä•Âëä: {ticker}")
    lines_cn.append(f"ÂΩìÂâçËÇ°‰ª∑: ${current_price:.2f}")
    # 1
    if current_price > avg_max_pain:
        sentiment1 = 'ÂÅèÁ©∫'
    elif current_price < avg_max_pain:
        sentiment1 = 'ÂÅèÂ§ö'
    else:
        sentiment1 = '‰∏≠ÊÄß'
    lines_cn.append(
        f"1Ô∏è‚É£ Max Pain Âπ≥Âùá: ${avg_max_pain:.2f} (ÂΩìÂâç${current_price:.2f}) -> {sentiment1}"
    )
    # 2
    pins = [(e, round(p*100,2)) for e,p in zip(expiries, pin_probs)]
    lines_cn.append(f"2Ô∏è‚É£ Èíâ‰ΩèÊ¶ÇÁéá: {pins} (ÂΩìÂâç${current_price:.2f})")
    # 3
    lines_cn.append(
        f"3Ô∏è‚É£ BS ÂÆö‰ª∑: Call${bs_call:.2f}, Put${bs_put:.2f} (ÂΩìÂâç${current_price:.2f})"
    )
    # 4
    lines_cn.append(
        f"4Ô∏è‚É£ Ë¥¢Êä•È¢ÑÊúü: ${low_move:.2f}-${high_move:.2f} (ÂΩìÂâç${current_price:.2f})"
    )
    # 5
    lines_cn.append(
        f"5Ô∏è‚É£ Vol Skew RR: {vol_skew_rr:.2f}% (ÂΩìÂâç${current_price:.2f})"
    )
    # 6
    lines_cn.append(
        f"6Ô∏è‚É£ OI ÊâßË°å‰ª∑: Call${max_call:.2f}, Put${max_put:.2f}; Êàê‰∫§ÈáèÂàÜÂ∏É POC${poc:.2f}-VAH${vah:.2f}-VAL${val:.2f} (ÂΩìÂâç${current_price:.2f})"
    )
    # 7
    lines_cn.append(
        f"7Ô∏è‚É£ ÁªºÂêàÈ¢ÑÊµãÂå∫Èó¥: ${forecast_low:.2f}-${forecast_high:.2f} (ÂΩìÂâç${current_price:.2f})"
    )
    score = compute_stock_rating(current_price, avg_max_pain, vol_skew_rr, poc, vah, val)
    lines_cn.append(f"ËÇ°Á•®ËØÑÂàÜ (0-10): {score}")

    # Build English report
    lines_en = []
    lines_en.append(f"üìä Option Market Analysis Report: {ticker}")
    lines_en.append(f"Current Price: ${current_price:.2f}")
    if current_price > avg_max_pain:
        sentiment1 = 'Bearish'
    elif current_price < avg_max_pain:
        sentiment1 = 'Bullish'
    else:
        sentiment1 = 'Neutral'
    lines_en.append(
        f"1Ô∏è‚É£ Max Pain Avg: ${avg_max_pain:.2f} (Price ${current_price:.2f}) -> {sentiment1}"
    )
    lines_en.append(
        f"2Ô∏è‚É£ Pinning Probabilities: {pins} (Price ${current_price:.2f})"
    )
    lines_en.append(
        f"3Ô∏è‚É£ BS Valuation: Call${bs_call:.2f}, Put${bs_put:.2f} (Price ${current_price:.2f})"
    )
    lines_en.append(
        f"4Ô∏è‚É£ Earnings Move: ${low_move:.2f}-${high_move:.2f} (Price ${current_price:.2f})"
    )
    lines_en.append(
        f"5Ô∏è‚É£ Vol Skew RR: {vol_skew_rr:.2f}% (Price ${current_price:.2f})"
    )
    lines_en.append(
        f"6Ô∏è‚É£ OI Levels: Call${max_call:.2f}, Put${max_put:.2f}; Volume Profile POC${poc:.2f}, VAH${vah:.2f}, VAL${val:.2f} (Price ${current_price:.2f})"
    )
    lines_en.append(
        f"7Ô∏è‚É£ Forecast Range: ${forecast_low:.2f}-${forecast_high:.2f} (Price ${current_price:.2f})"
    )
    lines_en.append(f"Stock Score (0-10): {score}")

    return "\n".join(lines_cn), "\n".join(lines_en)

# ================= Run Analysis =================
if st.sidebar.button("Run Analysis"):
    hist, df = fetch_data(ticker)
    current_price = float(hist['Close'][-1])
    expiries = list(stock.options)[:expiry_count]
    max_pain_prices = [current_price]*len(expiries)
    pin_probs = [0.012]*len(expiries)
    bs_call = black_scholes_price(current_price, current_price, forecast_days/252, 0.03, 0.2)
    bs_put = black_scholes_price(current_price, current_price, forecast_days/252, 0.03, 0.2, 'put')
    earnings_move = 4.17
    vol_skew_rr, call_iv, put_iv = -13.09, 67.19, 80.27
    max_call, max_put = current_price, current_price
    poc, vah, val = compute_volume_profile(df)

    cn_report, en_report = generate_reports(
        ticker, expiries, max_pain_prices, pin_probs,
        bs_call, bs_put, earnings_move, vol_skew_rr,
        call_iv, put_iv, current_price,
        poc, vah, val, max_call, max_put
    )
    st.markdown(cn_report)
    st.markdown("---")
    st.markdown(en_report)

    # Plot Anticipation with Bounds
    days = np.arange(0, forecast_days+1)
    avg_max_pain = float(np.mean(max_pain_prices))
    low_move = current_price*(1-earnings_move/100)
    high_move = current_price*(1+earnings_move/100)
    forecast_low = min(avg_max_pain, low_move)
    forecast_high = max(avg_max_pain, high_move)
    max_path = np.linspace(current_price, avg_max_pain, len(days))
    bs_path = np.linspace(current_price, current_price*(1+vol_skew_rr/200), len(days))
    avg_path = (max_path + bs_path)/2

    fig, ax = plt.subplots(figsize=(10,6))
    ax.plot(days, max_path, label="Max Pain Path")
    ax.plot(days, bs_path, label="BS Path")
    ax.plot(days, avg_path, linestyle='--', label="Average Path")
    ax.hlines([forecast_low, forecast_high], 0, forecast_days, linestyles='dotted', label='Forecast Bounds')
    ax.set_title("Price Anticipation Plot with Bounds")
    ax.set_xlabel("Days")
    ax.set_ylabel("Price")
    ax.legend()
    st.pyplot(fig)
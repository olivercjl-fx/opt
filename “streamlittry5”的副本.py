# -*- coding: utf-8 -*-
"""‚Äústreamlittry5‚ÄùÁöÑÂâØÊú¨

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wa5UpSu_7ESCqll6iciUljYHncojNbGi
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from scipy.stats import norm
from scipy.optimize import fsolve, curve_fit

# ================= Streamlit Sidebar Inputs =================
st.sidebar.title("Options Analysis Dashboard")
ticker = st.sidebar.text_input("Ticker", value="AAPL")
expiry_count = st.sidebar.slider("Expiry Count", 1, 10, 3)
forecast_days = st.sidebar.slider("Forecast Days", 10, 90, 30)
E = st.sidebar.slider("E (Pinning)", 0.001, 0.05, 0.01)
opt_type = st.sidebar.selectbox("Option Type", ["Put", "Call"])

# Ensure ticker is valid before fetching data
if ticker:
    stock = yf.Ticker(ticker)
    try:
        expirations = stock.options
        st.sidebar.write("Available Expiries:", expirations)
        selected_expiries = st.sidebar.multiselect(
            "Select Expiries for Analysis", expirations, default=expirations[:expiry_count]
        )
        valuation_expiry = st.sidebar.selectbox("Select Expiry for Valuation", expirations)
    except Exception as e:
        st.error(f"Error fetching options data: {e}")
        selected_expiries, valuation_expiry = [], None
else:
    st.stop()

# ================= Option Strategy Builder =================
st.sidebar.subheader("Option Strategy Builder")
strategy = st.sidebar.selectbox("Select Strategy", ["Single Call", "Single Put", "Vertical Spread", "Straddle"])
strike_price = st.sidebar.number_input("Strike Price", min_value=1.0, value=100.0)
premium = st.sidebar.number_input("Option Premium", min_value=0.0, value=5.0)
if strategy == "Vertical Spread":
    strike_price_2 = st.sidebar.number_input("Second Strike Price", min_value=1.0, value=105.0)
    premium_2 = st.sidebar.number_input("Second Option Premium", min_value=0.0, value=3.0)
if st.sidebar.button("Build Option"):
    price_range = np.linspace(strike_price * 0.8, strike_price * 1.2, 100)
    payoff = None
    if strategy == "Single Call":
        payoff = np.maximum(price_range - strike_price, 0) - premium
    elif strategy == "Single Put":
        payoff = np.maximum(strike_price - price_range, 0) - premium
    elif strategy == "Vertical Spread":
        payoff = (
            np.maximum(price_range - strike_price, 0) - premium
        ) - (
            np.maximum(price_range - strike_price_2, 0) - premium_2
        )
    elif strategy == "Straddle":
        payoff = (
            np.maximum(price_range - strike_price, 0) - premium
        ) + (
            np.maximum(strike_price - price_range, 0) - premium
        )
    fig, ax = plt.subplots(figsize=(8, 4))
    ax.plot(price_range, payoff, label=strategy)
    ax.axhline(0, color='black', linestyle='--')
    ax.set_title(f"Payoff Diagram: {strategy}")
    ax.set_xlabel("Underlying Price")
    ax.set_ylabel("Profit / Loss")
    ax.legend()
    st.pyplot(fig)

# ================= Black-Scholes Pricing =================
def black_scholes_price(S, K, T, r, sigma, option_type='call'):
    d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    if option_type.lower() == 'call':
        return S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)
    return K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)

# ================= Fetch & Volume Analysis =================
def fetch_stock_data(ticker, period="6mo", interval="1h"):
    df = yf.download(ticker, period=period, interval=interval)
    if df.empty:
        st.warning(f"[ÈîôËØØ] Êó†Ê≥ïËé∑Âèñ {ticker} Êï∞ÊçÆ„ÄÇ")
        return pd.DataFrame()
    df.reset_index(inplace=True)
    return df

def compute_volume_profile(df, bins=50):
    if df.empty:
        return None, None, None
    hist, edges = np.histogram(df['Close'], bins=bins, weights=df['Volume'])
    poc = (edges[np.argmax(hist)] + edges[np.argmax(hist) + 1]) / 2
    total = hist.sum()
    sorted_idx = np.argsort(hist)[::-1]
    cum = np.cumsum(hist[sorted_idx])
    va_idx = sorted_idx[cum <= total * 0.7]
    va_prices = [(edges[i] + edges[i + 1]) / 2 for i in va_idx]
    return poc, max(va_prices), min(va_prices)

# ================= Generate Detailed Report =================
def generate_option_report(
    ticker, expiries, max_pain_prices, pinning_probs,
    bs_call, bs_put, earnings_move, vol_skew_rr,
    call_iv, put_iv, current_price,
    poc, vah, val, max_call, max_put,
    forecast_days=30
):
    report = f"üìä **Option Market Analysis Report: {ticker}**\n\n"
    avg_max_pain = np.mean(max_pain_prices)
    expiry_str = ", ".join(expiries)

    report += "1Ô∏è‚É£ **Max Pain (ÊúÄÂ§ßÁóõÁÇπ‰ª∑):**\n"
    report += f"- Âà∞ÊúüÊó•ÂàÜÂà´‰∏∫ {expiries} ÁöÑ Max Pain ‰ª∑Ê†º: {max_pain_prices}\n"
    report += f"- Âπ≥ÂùáÊúÄÂ§ßÁóõÁÇπ‰ª∑Á∫¶‰∏∫ **${avg_max_pain:.2f}**ÔºåÂΩìÂâçËÇ°‰ª∑‰∏∫ **${current_price:.2f}**„ÄÇ\n"
    report += f"‚è≥ **‰øùË¥®Êúü:** ÊúâÊïàÊúüËá≥ {expiries[0]}„ÄÇ\n\n"

    report += "2Ô∏è‚É£ **Pinning Probability (Èíâ‰ΩèÊ¶ÇÁéá):**\n"
    for e, p in zip(expiries, pinning_probs):
        report += f"- {e}: {p*100:.2f}%\n"
    report += f"‚è≥ ‰ªÖÈÄÇÁî®‰∫éÂà∞ÊúüÊó• ({expiry_str})„ÄÇ\n\n"

    report += "3Ô∏è‚É£ **Black-Scholes ÂÆö‰ª∑:**\n"
    report += f"- Call: ${bs_call:.2f}, Put: ${bs_put:.2f}„ÄÇ\n‚è≥ Âç≥Êúü‰º∞ÂÄºÔºåÈúÄÊØèÊó•Êõ¥Êñ∞„ÄÇ\n\n"

    low, high = current_price*(1-earnings_move/100), current_price*(1+earnings_move/100)
    report += "4Ô∏è‚É£ **Earnings Move:**\n"
    report += f"- ¬±{earnings_move:.2f}%: ${low:.2f} - ${high:.2f}„ÄÇ\n‚è≥ Ë¥¢Êä•Êó•ÂâçÂêé1Âë®„ÄÇ\n\n"

    report += "5Ô∏è‚É£ **Vol Skew & RR:**\n"
    report += f"- Call IV: {call_iv:.2f}%, Put IV: {put_iv:.2f}%. RR: {vol_skew_rr:.2f}%„ÄÇ\n\n"

    report += "7Ô∏è‚É£ **OI & Volume Profile ÂØπÊØî:**\n"
    report += f"- Call ÊúÄÂ§ß OI ÊâßË°å‰ª∑: ${max_call:.2f}ÔºåPut ÊúÄÂ§ß OI ÊâßË°å‰ª∑: ${max_put:.2f}„ÄÇ\n"
    report += f"- POC: ${poc:.2f}, VAH: ${vah:.2f}, VAL: ${val:.2f}„ÄÇ\n"
    report += f"- ÂΩìÂâçËÇ°‰ª∑: ${current_price:.2f}„ÄÇ\n"
    if current_price > vah:
        report += "üëâ ‰ª∑Ê†ºÈ´ò‰∫é VAHÔºåÂèØËÉΩÁü≠ÊúüË∂Ö‰π∞„ÄÇ\n\n"
    elif current_price < val:
        report += "üëâ ‰ª∑Ê†º‰Ωé‰∫é VALÔºåÂèØËÉΩÁü≠ÊúüË∂ÖÂçñ„ÄÇ\n\n"
    else:
        report += "üëâ ‰ª∑Ê†ºÂú®‰ª∑ÂÄºÂå∫Èó¥ÂÜÖÔºåÂ±û‰∫éÊ≠£Â∏∏Ê≥¢Âä®„ÄÇ\n\n"

    expiry_date = (datetime.today()+timedelta(days=forecast_days)).strftime("%Y-%m-%d")
    report += "6Ô∏è‚É£ **‰ª∑Ê†ºÈ¢ÑÊµãÂå∫Èó¥:**\n"
    report += f"- {forecast_days}Â§©: ${low:.2f} - ${high:.2f} (Ëá≥ {expiry_date})„ÄÇ\n\n"

    report += f"üìå **ÁªìËÆ∫:** Â∏ÇÂú∫ {'ÂÅèÂ§ö' if vol_skew_rr>0 else 'ÂÅèÁ©∫'}ÔºåÂª∫ËÆÆÂ∏ÉÂ±ÄÁõ∏Â∫îÁ≠ñÁï•„ÄÇ"
    return report

# ================= Run Analysis =================
if st.sidebar.button("Run Analysis"):
    hist = stock.history(period='1d')
    if hist.empty:
        st.error("Êó†ÂéÜÂè≤Êï∞ÊçÆ„ÄÇ")
    else:
        current_price = hist['Close'].iloc[-1]
        chain = stock.option_chain(valuation_expiry)
        calls, puts = chain.calls, chain.puts
        max_call = calls.loc[calls['openInterest'].idxmax()]['strike']
        max_put = puts.loc[puts['openInterest'].idxmax()]['strike']
        df = fetch_stock_data(ticker)
        poc, vah, val = compute_volume_profile(df)
        max_pain_prices = [current_price-2 for _ in selected_expiries]
        pinning_probs = [0.012]*len(selected_expiries)
        bs_call, bs_put = 7.43, 6.94
        earnings_move = 4.17
        vol_skew_rr, call_iv, put_iv = -13.09, 67.19, 80.27

        report = generate_option_report(
            ticker, selected_expiries, max_pain_prices, pinning_probs,
            bs_call, bs_put, earnings_move, vol_skew_rr,
            call_iv, put_iv, current_price,
            poc, vah, val, max_call, max_put,
            forecast_days
        )
        st.markdown(report)

        # Price anticipation plot (ÂéüÊúâ)
        days = np.arange(0, forecast_days+1)
        max_path = np.linspace(current_price, np.mean(max_pain_prices), len(days))
        bs_path = np.linspace(current_price, current_price*(1+vol_skew_rr/200), len(days))
        avg_path = (max_path + bs_path)/2
        fig, ax = plt.subplots(figsize=(10,6))
        ax.plot(days, max_path, label="Max Pain Path")
        ax.plot(days, bs_path, label="BS Path")
        ax.plot(days, avg_path, linestyle='--', label="Average Path")
        ax.set_title("Price Anticipation Plot")
        ax.set_xlabel("Days")
        ax.set_ylabel("Price")
        ax.legend()
        st.pyplot(fig)